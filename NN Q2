import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

class MLP:
    def __init__(self, input_size, hidden_size, output_size, learning_rate=0.1, epochs=10000):
        self.learning_rate = learning_rate
        self.epochs = epochs
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        
        # Initialize weights
        self.weights_input_hidden = np.random.rand(self.input_size + 1, self.hidden_size)  # Including bias
        self.weights_hidden_output = np.random.rand(self.hidden_size + 1, self.output_size)  # Including bias
        
        self.loss_history = []  # Store loss values
    
    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))
    
    def sigmoid_derivative(self, x):
        return x * (1 - x)
    
    def forward(self, x):
        x = np.insert(x, 0, 1)  # Adding bias input
        self.hidden_input = np.dot(x, self.weights_input_hidden)
        self.hidden_output = self.sigmoid(self.hidden_input)
        
        self.hidden_output = np.insert(self.hidden_output, 0, 1)  # Adding bias to hidden layer
        self.final_input = np.dot(self.hidden_output, self.weights_hidden_output)
        self.final_output = self.sigmoid(self.final_input)
        return self.final_output
    
    def train(self, X, y):
        for epoch in range(self.epochs):
            total_error = 0
            for i in range(len(X)):
                x_i = np.insert(X[i], 0, 1)  # Adding bias input
                target = y[i]
                
                # Forward pass
                hidden_input = np.dot(x_i, self.weights_input_hidden)
                hidden_output = self.sigmoid(hidden_input)
                
                hidden_output = np.insert(hidden_output, 0, 1)  # Adding bias to hidden layer
                final_input = np.dot(hidden_output, self.weights_hidden_output)
                final_output = self.sigmoid(final_input)
                
                # Compute error
                error = target - final_output
                total_error += np.sum(error ** 2)
                
                # Backpropagation
                output_delta = error * self.sigmoid_derivative(final_output)
                hidden_error = output_delta.dot(self.weights_hidden_output[1:].T)
                hidden_delta = hidden_error * self.sigmoid_derivative(hidden_output[1:])
                
                # Update weights
                self.weights_hidden_output += self.learning_rate * np.outer(hidden_output, output_delta)
                self.weights_input_hidden += self.learning_rate * np.outer(x_i, hidden_delta)
            
            self.loss_history.append(total_error)
    
    def evaluate(self, X, y):
        correct = sum(np.round(self.forward(x)) == y_i for x, y_i in zip(X, y))
        return correct / len(y)
    
    def plot_loss_curve(self):
        plt.plot(self.loss_history)
        plt.xlabel('Epochs')
        plt.ylabel('Total Error')
        plt.title('Loss Curve')
        plt.show()
    
    def get_confusion_matrix(self, X, y):
        y_pred = [np.round(self.forward(x)) for x in X]
        cm = confusion_matrix(y, y_pred)
        disp = ConfusionMatrixDisplay(confusion_matrix=cm)
        disp.plot()
        plt.show()

# Python Implementation
# XOR truth table
X_xor = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y_xor = np.array([[0], [1], [1], [0]])

# Train MLP for XOR
t_xor = MLP(input_size=2, hidden_size=2, output_size=1)
t_xor.train(X_xor, y_xor)
xor_accuracy = t_xor.evaluate(X_xor, y_xor)
print("XOR MLP Accuracy:", xor_accuracy)
t_xor.plot_loss_curve()
t_xor.get_confusion_matrix(X_xor, y_xor)

